package com.assignment.furniture_moving_service_swp391.controller;

import com.assignment.furniture_moving_service_swp391.dal.QuotationDAO;
import com.assignment.furniture_moving_service_swp391.model.FurnitureType;
import com.assignment.furniture_moving_service_swp391.model.ItemRequest;
import com.assignment.furniture_moving_service_swp391.model.QuotationRequest;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.time.LocalDate;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@WebServlet("/quotation")
public class QuotationRequestServlet extends HttpServlet {

    private final QuotationDAO quotationDAO = new QuotationDAO();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // X·ª≠ l√Ω hi·ªÉn th·ªã form (n·∫øu ch∆∞a c√≥)
        try {
            // L·∫•y danh s√°ch ƒë·ªì ƒë·∫°c theo nh√≥m ƒë·ªÉ hi·ªÉn th·ªã trong form select/optgroup
            Map<String, List<FurnitureType>> furnitureGroups = quotationDAO.getGroupedFurnitureData();
            request.setAttribute("furnitureGroups", furnitureGroups);
            request.getRequestDispatcher("/views/quotation-request.jsp").forward(request, response);

        } catch (RuntimeException e) {
            // X·ª≠ l√Ω l·ªói DB (v√≠ d·ª•: kh√¥ng th·ªÉ t·∫£i danh m·ª•c)
            request.setAttribute("errorMessage", "L·ªói h·ªá th·ªëng: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu danh m·ª•c.");
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        request.setCharacterEncoding("UTF-8");

        QuotationRequest req = new QuotationRequest();
        try {
            // 1) L·∫•y d·ªØ li·ªáu c∆° b·∫£n
            req.setPickupAddress(request.getParameter("pickupAddress"));
            req.setDropoffAddress(request.getParameter("dropoffAddress"));

            String moveDateStr = request.getParameter("moveDate");
            if (moveDateStr != null && !moveDateStr.isEmpty()) {
                req.setMoveDate(LocalDate.parse(moveDateStr));
            }

            // T√πy ch·ªçn b·ªï sung
            String voucher = request.getParameter("voucherCode");
            req.setVoucherCode(voucher == null ? null : voucher.trim());
            req.setSpecialNotes(request.getParameter("specialNotes"));

            String manpower = request.getParameter("manpowerOption");
            req.setManpowerOption(manpower == null ? "NONE" : manpower);

            req.setHighValueItems(request.getParameter("highValueItems") != null);

            // 2) ƒê·ªçc m·∫£ng ph·∫≥ng itemIds/quantities
            String[] idArr  = request.getParameterValues("itemIds");
            String[] qtyArr = request.getParameterValues("quantities");

            List<ItemRequest> items = new ArrayList<>();
            if (idArr != null && qtyArr != null) {
                int n = Math.min(idArr.length, qtyArr.length);
                Map<Integer, Integer> sum = new LinkedHashMap<>();
                for (int i = 0; i < n; i++) {
                    try {
                        int id  = Integer.parseInt(idArr[i].trim());
                        int qty = Integer.parseInt(qtyArr[i].trim());
                        if (id > 0 && qty > 0) sum.merge(id, qty, Integer::sum);
                    } catch (Exception ignored) {}
                }
                for (Map.Entry<Integer, Integer> e : sum.entrySet()) {
                    ItemRequest it = new ItemRequest();
                    it.setItemId(e.getKey());
                    it.setQuantity(e.getValue());
                    items.add(it);
                }
            }

            if (items.isEmpty()) {
                request.setAttribute("errorMessage", "Vui l√≤ng th√™m √≠t nh·∫•t 1 m√≥n ƒë·ªì.");
                request.setAttribute("quotation", req);
                repopulateFormAttributes(request);
                request.getRequestDispatcher("/views/quotation-request.jsp").forward(request, response);
                return;
            }

            // G√ÅN items V√ÄO req (ƒëi·ªÉm l·ªói tr∆∞·ªõc ƒë√¢y)
            req.setItemRequests(items);

            // 3) T√≠nh to√°n & L∆∞u DB
            QuotationRequest savedRequest = quotationDAO.processQuotation(req);

            // 4) Redirect sang trang h·ª£p ƒë·ªìng
            // (tu·ª≥ ch·ªçn: kh√¥ng c·∫ßn l∆∞u session n·∫øu contract.jsp t·ª± load t·ª´ DB theo ID)
            request.getSession().setAttribute("currentQuotation", savedRequest);
            response.sendRedirect(request.getContextPath() + "/contract?quotationId=" + savedRequest.getQuotationID());

        } catch (IllegalArgumentException e) {
            request.setAttribute("errorMessage", e.getMessage());
            request.setAttribute("quotation", req);
            repopulateFormAttributes(request);
            request.getRequestDispatcher("/views/quotation-request.jsp").forward(request, response);

        } catch (RuntimeException e) {
            request.setAttribute("errorMessage", "L·ªói khi x·ª≠ l√Ω b√°o gi√°: " + e.getMessage());
            request.setAttribute("quotation", req);
            repopulateFormAttributes(request);
            request.getRequestDispatcher("/views/quotation-request.jsp").forward(request, response);
        }
    }


    /**
     * Ph∆∞∆°ng th·ª©c ph√¢n t√≠ch danh s√°ch ItemRequest m·∫°nh m·∫Ω h∆°n.
     * S·ª≠ d·ª•ng regex ƒë·ªÉ x·ª≠ l√Ω c√°c tham s·ªë d·∫°ng: itemRequests[i].itemId v√† itemRequests[i].quantity
     */
    private List<ItemRequest> parseItemRequests(HttpServletRequest request) {

        // L·∫•y t·∫•t c·∫£ c√°c t√™n tham s·ªë (parameter names)
        Map<String, String[]> params = request.getParameterMap();

        // Pattern ƒë·ªÉ t√¨m ch·ªâ s·ªë [i] t·ª´ t√™n tham s·ªë (v√≠ d·ª•: "itemRequests[0].itemId")
        // Regex: t√¨m itemRequests[<ch·ªØ s·ªë>]
        Pattern indexPattern = Pattern.compile("itemRequests\\[(\\d+)\\]");

        // Map t·∫°m ƒë·ªÉ nh√≥m itemId v√† quantity theo c√πng m·ªôt index
        Map<Integer, ItemRequest> itemMap = new HashMap<>();

        for (String paramName : params.keySet()) {
            Matcher matcher = indexPattern.matcher(paramName);

            if (matcher.find()) {
                int index = Integer.parseInt(matcher.group(1)); // L·∫•y index (0, 1, 2, ...)
                String[] values = params.get(paramName); // L·∫•y m·∫£ng gi√° tr·ªã (th∆∞·ªùng ch·ªâ c√≥ 1 ph·∫ßn t·ª≠)
                String value = (values.length > 0) ? values[0] : ""; // L·∫•y gi√° tr·ªã chu·ªói

                // üí° KI·ªÇM TRA: B·ªè qua c√°c gi√° tr·ªã r·ªóng/null, v√¨ gi√° tr·ªã r·ªóng s·∫Ω g√¢y NumberFormatException
                if (value.trim().isEmpty()) {
                    continue;
                }

                // Kh·ªüi t·∫°o ho·∫∑c l·∫•y ItemRequest t·ª´ map
                ItemRequest item = itemMap.computeIfAbsent(index, k -> new ItemRequest());

                try {
                    // Ch√∫ng ta kh√¥ng c·∫ßn ki·ªÉm tra value == null n·ªØa nh·ªù logic ·ªü tr√™n
                    if (paramName.endsWith(".itemId")) {
                        item.setItemId(Integer.parseInt(value));
                    } else if (paramName.endsWith(".quantity")) {
                        item.setQuantity(Integer.parseInt(value));
                    }
                } catch (NumberFormatException e) {
                    // Log l·ªói v√† b·ªè qua item kh√¥ng h·ª£p l·ªá
                    System.err.println("D·ªØ li·ªáu ItemRequest kh√¥ng h·ª£p l·ªá (Kh√¥ng ph·∫£i s·ªë): " + paramName + " = " + value);
                }
            }
        }

        // L·ªçc ra c√°c ItemRequest h·ª£p l·ªá (itemId v√† quantity > 0)
        List<ItemRequest> validItems = itemMap.values().stream()
                .filter(item -> item.getItemId() > 0 && item.getQuantity() > 0)
                .collect(Collectors.toList());

        System.out.println("DEBUG: S·ªë l∆∞·ª£ng items h·ª£p l·ªá sau x·ª≠ l√Ω: " + validItems.size());

        return validItems;
    }

    // Ph∆∞∆°ng th·ª©c tr·ª£ gi√∫p ƒë·ªÉ t·∫£i l·∫°i danh m·ª•c khi c√≥ l·ªói
    private void repopulateFormAttributes(HttpServletRequest request) {
        try {
            Map<String, List<FurnitureType>> furnitureGroups = quotationDAO.getGroupedFurnitureData();
            request.setAttribute("furnitureGroups", furnitureGroups);
        } catch (RuntimeException dbError) {
            // X·ª≠ l√Ω l·ªói n·∫øu ngay c·∫£ vi·ªác t·∫£i danh m·ª•c c≈©ng th·∫•t b·∫°i
            System.err.println("L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ t·∫£i l·∫°i danh m·ª•c cho form. " + dbError.getMessage());
            request.setAttribute("furnitureGroups", new ArrayList<>());
        }
    }
}
